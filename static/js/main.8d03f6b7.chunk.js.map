{"version":3,"sources":["App.js","index.js"],"names":["accessKey","process","columnsCountBreakPoints","320","370","900","1200","1500","1700","2000","2400","App","useState","images","setImages","page","setPage","inputValue","setInputValue","arrowTop","setArrowTop","getPhotos","a","apiUrl","fetch","res","json","data","imagesFromApi","results","e","preventDefault","useEffect","className","onSubmit","type","placeholder","value","onChange","target","href","class","onScroll","window","scrollY","dataLength","length","next","prevPage","hasMore","loader","gutter","map","image","index","urls","regular","rel","src","small","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAQMA,EAAYC,8CAGZC,EAA0B,CAAEC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,IAAM,EAAGC,KAAM,GAGrF,SAASC,IAAO,IAAD,EAEAC,mBAAS,IAFT,mBAErBC,EAFqB,KAEbC,EAFa,OAGJF,mBAAS,GAHL,mBAGrBG,EAHqB,KAGfC,EAHe,OAIQJ,mBAAS,IAJjB,mBAIrBK,EAJqB,KAITC,EAJS,OAKIN,oBAAS,GALb,mBAKrBO,EALqB,KAKXC,EALW,cAYbC,IAZa,2EAY5B,oCAAAC,EAAA,6DACMC,EADN,oCAGMN,IAAYM,EAAM,wDAAoDN,IAE1EM,GAAM,gBAAaR,GACnBQ,GAAM,qBAAkBvB,GAN1B,SAQoBwB,MAAMD,GAR1B,cAQQE,EARR,gBASqBA,EAAIC,OATzB,OASQC,EATR,OAYQC,EAZR,UAYwBD,EAAKE,eAZ7B,QAYwCF,EAEzB,IAATZ,GAAYD,EAAUc,GAE1Bd,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,YAA2Be,OAhBvC,6CAZ4B,kEA+B5B,WAA4BE,GAA5B,SAAAR,EAAA,sDACEQ,EAAEC,iBAEFf,EAAQ,GACRK,IAJF,4CA/B4B,sBA0D5B,OAnDAW,qBAAU,WACRX,MAEC,IAiDD,sBAAKY,UAAU,MAAf,UACE,kEAEA,uBAAMC,SA9DkB,4CA8DxB,UACE,uBACEC,KAAK,OACLC,YAAY,qBACZC,MAAOpB,EACPqB,SAAU,SAAAR,GAAC,OAAIZ,EAAcY,EAAES,OAAOF,UAExC,+CAGDlB,GAAY,mBAAGqB,KAAK,IAAIP,UAAU,YAAtB,SAAkC,mBAAGQ,MAAM,sBAExD,cAAC,IAAD,CACEC,SAnCN,WAEMC,OAAOC,QAAU,IACnBxB,GAAY,GAEZA,GAAY,IA+BVyB,WAAYhC,EAAOiC,OACnBC,KAAM,WACJ/B,GAAQ,SAAAgC,GAAQ,OAAIA,EAAW,KAC/B3B,KAEF4B,SAAS,EACTC,OAAQ,4CARV,SAUE,cAAC,oBAAD,CACEhD,wBAAyBA,EAD3B,SAGE,cAAC,IAAD,CAASiD,OAAQ,EAAjB,SAEGtC,EAAOuC,KAAI,SAACC,EAAOC,GAAR,OACV,qBACErB,UAAU,OADZ,SAGE,mBACEO,KAAMa,EAAME,KAAKC,QACjBjB,OAAO,SACPkB,IAAI,sBAHN,SAIE,qBACEC,IAAKL,EAAME,KAAKI,MAChBC,IAAKP,EAAMQ,gBACX5B,UAAU,uBARTqB,eCtGrBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8d03f6b7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n// https://www.npmjs.com/package/react-infinite-scroll-component\nimport InfiniteScroll from 'react-infinite-scroll-component'\n// https://www.npmjs.com/package/react-responsive-masonry\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\nimport './App.css';\n\n// ACCESS KEY FROM .env\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY\n\n// REACT MASONRY COLUMN BREAKPOINTS\nconst columnsCountBreakPoints = { 320: 1, 370: 2, 900: 3, 1200: 4, 1500: 5, 1700: 6, 2000: 7, 2400: 8 };\n\n\nexport default function App() {\n\n  const [images, setImages] = useState([])\n  const [page, setPage] = useState(1)\n  const [inputValue, setInputValue] = useState('')\n  const [arrowTop, setArrowTop] = useState(false)\n\n  useEffect(() => {\n    getPhotos()\n    //  eslint-disable-next-line\n  }, [])\n\n  async function getPhotos() {\n    let apiUrl = `https://api.unsplash.com/photos/?`\n\n    if (inputValue) apiUrl = `https://api.unsplash.com/search/photos/?query=${inputValue}`\n\n    apiUrl += `&page=${page}`\n    apiUrl += `&client_id=${accessKey}`\n\n    const res = await fetch(apiUrl)\n    const data = await res.json()\n\n    // console.log(data)\n    const imagesFromApi = data.results ?? data\n\n    if (page === 1) setImages(imagesFromApi)\n\n    setImages((images) => [...images, ...imagesFromApi])\n  }\n\n  async function searchPhotos(e) {\n    e.preventDefault()\n\n    setPage(1)\n    getPhotos()\n  }\n\n  // console.log(images)\n\n  function handleRenderArrowTop() {\n    // console.log(window.scrollY)\n    if (window.scrollY > 700) {\n      setArrowTop(true)\n    } else {\n      setArrowTop(false)\n    }\n  }\n\n  if (!accessKey) {\n    return (\n      <>\n        <h1>Access key error, API key not found.</h1>\n        <a href=\"https://unsplash.com/documentation\" className=\"error\">Sign in for your API access key</a>\n      </>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Unsplash Infinite Image Gallery!</h1>\n\n      <form onSubmit={searchPhotos}>\n        <input\n          type=\"text\"\n          placeholder=\"Search Unsplash...\"\n          value={inputValue}\n          onChange={e => setInputValue(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n      {/* eslint-disable-next-line */}\n      {arrowTop && <a href=\"#\" className=\"arrow-top\"><i class=\"fas fa-angle-up\"></i></a>}\n\n      <InfiniteScroll\n        onScroll={handleRenderArrowTop}\n        dataLength={images.length} //This is important field to render the next data\n        next={() => {\n          setPage(prevPage => prevPage + 1)\n          getPhotos()\n        }}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}>\n\n        <ResponsiveMasonry\n          columnsCountBreakPoints={columnsCountBreakPoints}\n        >\n          <Masonry gutter={4}>\n\n            {images.map((image, index) => (\n              <div\n                className=\"item\"\n                key={index}>\n                <a\n                  href={image.urls.regular}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                  <img\n                    src={image.urls.small}\n                    alt={image.alt_description}\n                    className='masonry-content' />\n                </a>\n              </div>\n            ))}\n\n          </Masonry>\n        </ResponsiveMasonry >\n      </InfiniteScroll >\n    </div >\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}